<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BBDDs on Blog</title>
    <link>https://franjavimn.onrender.com/bbdd/</link>
    <description>Recent content in BBDDs on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <copyright>Francisco Javier Martín Núñez</copyright>
    <lastBuildDate>Tue, 09 Mar 2021 12:28:51 +0100</lastBuildDate><atom:link href="https://franjavimn.onrender.com/bbdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Movimiento De Datos</title>
      <link>https://franjavimn.onrender.com/bbdd/movimiento-de-datos/</link>
      <pubDate>Tue, 09 Mar 2021 12:28:51 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/movimiento-de-datos/</guid>
      <description>Realiza una exportación del esquema de SCOTT usando la consola Enterprise Manager, con las siguientes condiciones:   Exporta tanto la estructura de las tablas como los datos de las mismas Excluye la tabla BONUS y los departamentos sin empleados. Realiza una estimación previa del tamaño necesario para el fichero de exportación. Programa la operación para dentro de 5 minutos. Genera un archivo de log en el directorio raíz.  Realiza ahora la operación con Oracle Data Pump.</description>
    </item>
    
    <item>
      <title>Auditorias</title>
      <link>https://franjavimn.onrender.com/bbdd/auditorias/</link>
      <pubDate>Thu, 04 Mar 2021 12:55:26 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/auditorias/</guid>
      <description>Auditoría de Bases de Datos  Activa desde SQL*Plus la auditoría de los intentos de acceso fallidos al sistema. Comprueba su funcionamiento  Para activar la auditoría de los intentos de acceso fallidos primero tenemos que ver los parámetros de auditoría que tenemos en nuestra base de datos:
SQL&amp;gt; SHOW PARAMETER AUDIT NAME TYPE VALUE ------------------------------------ ----------- ------------------------------ audit_file_dest string C:\APP\FRANJ\ADMIN\ORCL\ADUMP audit_sys_operations boolean FALSE audit_trail string DB Una vez hecho esto y visto los parametros vamos a activar el parametro audit_trail:</description>
    </item>
    
    <item>
      <title>Almacenamiento</title>
      <link>https://franjavimn.onrender.com/bbdd/almacenamiento/</link>
      <pubDate>Thu, 18 Feb 2021 18:22:31 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/almacenamiento/</guid>
      <description>Oracle  Crea un tablespace de undo e intenta crear una tabla en él.  Creamos el tablespace de nombre undo_oracle1 y con un datafile de nombre tablespaceundo1:
SQL&amp;gt; create undo tablespace undo_oracle1 DATAFILE &amp;#39;tablespaceundo1.dbf&amp;#39; size 100M autoextend on; Tablespace creado. Ahora bien, si intentamos crear una table en dicho tablespace nos saldrá el siguiente error:
SQL&amp;gt; create table prueba1( 2 nombre varchar2(10)) 3 tablespace undo_oracle1; create table prueba1( * ERROR en lÝnea 1: ORA-30022: No se pueden crear segmentos en un tablespace de deshacer Crea un tablespace temporal TEMP2 y escribe una sentencia SQL que genere un script que haga usar TEMP2 a todos los usuarios que tienen USERS como tablespace por defecto.</description>
    </item>
    
    <item>
      <title>Diferencias Almacenamiento</title>
      <link>https://franjavimn.onrender.com/bbdd/diferencias-almacenamiento/</link>
      <pubDate>Thu, 18 Feb 2021 18:08:42 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/diferencias-almacenamiento/</guid>
      <description>Diferencias entre MySQL y Postgres para gestionar el almacenamiento. En el siguiente articulo vamos a ver las limitaciones que presentan los gestores de bases de datos MySQL y Postgres en cuanto al almacenamiento respector a Oracle
MySQL MySQL es un Sistema Gestor de Base de Datos, donde presenta tener un sistema de almacenamiento sobre tablespaces, usando sus motores de almacenamiento, que son los motores de almacenamiento InnoDB y NDB.
  NDB Cluster es el motor de almacenamiento usado por MySQL Cluster, para implementar tablas que se particionan en varias máquinas.</description>
    </item>
    
    <item>
      <title>Interconexion</title>
      <link>https://franjavimn.onrender.com/bbdd/interconexion/</link>
      <pubDate>Mon, 08 Feb 2021 18:19:40 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/interconexion/</guid>
      <description>Interconexión de Servidores de Bases de Datos Las interconexiones de servidores de bases de datos son operaciones que pueden ser muy útiles en diferentes contextos. Básicamente, se trata de acceder a datos que no están almacenados en nuestra base de datos, pudiendo combinarlos con los que ya tenemos.
En esta práctica veremos varias formas de crear un enlace entre distintos servidores de bases de datos. Se pide los tres siguientes puntos:</description>
    </item>
    
    <item>
      <title>Mongodb</title>
      <link>https://franjavimn.onrender.com/bbdd/mongodb/</link>
      <pubDate>Wed, 09 Dec 2020 13:46:40 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/mongodb/</guid>
      <description>Instalar mongodb en una maquina debian 10 En mi caso vamos a instalar debian 10 en una maquina virtual con vagrant, el codigo de vagrant que he usado es el siguiente:
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.define :mongodb do |mongodb| mongodb.vm.box = &amp;#34;debian/buster64&amp;#34; mongodb.vm.hostname = &amp;#34;mongodb&amp;#34; mongodb.vm.network :public_network, :bridge=&amp;gt;&amp;#34;wlp2s0&amp;#34; end end Cuando tengamos la maquina lista lo que vamos a hacer es instalar unas herramientas antes de empezar:
#### Actualizamos las listas de repositorios #### vagrant@mongodb:~$ sudo apt update #### Instalamos las herramientas necesarias #### vagrant@mongodb:~$ sudo apt install gnupg -y Descargar mongodb para debian 10 AHora que ya tenemos las herramientas anteriores lo que debemos de hacer es añadir un nuevo repositorio a nuestra maquina ya que los paquetes de mongodb no se encuentran en los repositorios de debian, por lo que ejecutamos los siguientes comandos:</description>
    </item>
    
    <item>
      <title>Postgres Debian</title>
      <link>https://franjavimn.onrender.com/bbdd/postgres-debian/</link>
      <pubDate>Wed, 09 Dec 2020 13:45:06 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/postgres-debian/</guid>
      <description>Instalacion de un servidor Postgres Lo primero que debemos de tener es una maquina virtual en la cual vamos a realizar esta instalacion, en mi caso voy a usar una maquina con un sistema debian 10, creada mediante vagrant:
# Fichero vagrant Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.define :postgres do |postgres| postgres.vm.box = &amp;#34;debian/buster64&amp;#34; postgres.vm.hostname = &amp;#34;postgres&amp;#34; postgres.vm.network :public_network, :bridge=&amp;gt;&amp;#34;wlp2s0&amp;#34; end end Para poder instalar el servidor de postgreSQL vamos a instalar el paquete llamado postgresql el cual, al instalarlo y ver su version vemos que actualmente tenemos la version 11.</description>
    </item>
    
  </channel>
</rss>
