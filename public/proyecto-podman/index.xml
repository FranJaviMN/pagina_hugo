<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Proyecto-podmen on Blog</title>
    <link>https://franjavimn.onrender.com/proyecto-podman/</link>
    <description>Recent content in Proyecto-podmen on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <copyright>Francisco Javier Martín Núñez</copyright>
    <lastBuildDate>Tue, 01 Jun 2021 13:15:43 +0200</lastBuildDate><atom:link href="https://franjavimn.onrender.com/proyecto-podman/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Buildah</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/buildah/</link>
      <pubDate>Tue, 01 Jun 2021 13:15:43 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/buildah/</guid>
      <description>Buildah Buildah es una herramienta de linea de comandos que nos permite la construcción de imagenes para contenedores del tipo OCI(Open Container Initiative).
Buildah es una herramienta de creación que le permite controlar cómo se disponen las capas de imágenes y se accede a los datos durante las creaciones. Para utilizar este programa, no se requiere ser el usuario root por lo que, al igual que ocurre con podman, es una herramienta rootless y podemos usarla siendo usuarios normales del sistema.</description>
    </item>
    
    <item>
      <title>Skopeo</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/skopeo/</link>
      <pubDate>Tue, 01 Jun 2021 12:13:22 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/skopeo/</guid>
      <description>Skopeo Cuando hablamos de contenedores tambien podemos hablar de las imagenes que se usan para la creación de estos, las imagenes normalmente las descargamaos desde registros como son Docker Hub o sobre registros privados creados en local.
Si queremos ver que tipo de imagenes tenemos en estos registros, ver si la imagen existe, obtener informacion sobre una imagen&amp;hellip; Para ello tenemos la herramienta de Skopeo que es una utilidad línea de comandos que realiza varias operaciones en imágenes de contenedores y registros de imágenes.</description>
    </item>
    
    <item>
      <title>Compose Wordpress</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/compose-wordpress/</link>
      <pubDate>Tue, 01 Jun 2021 11:55:04 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/compose-wordpress/</guid>
      <description>Para este escenario podemos seguir la documentación sobre la imagen que estamos usando, en este caso usamos la imagen de wordpress y de mariadb.
Podemos ver mas parametros y variables a configurar en la documentacion:
 Mariadb: documentación de la imagen Wordpress: Documentación de la imagen Fichero .yml  #### Ejecutamos el fichero docker-compose.yml con podman-compose #### vagrant@podman:~/.local/bin$ ./podman-compose -t 1podfw -p wp_compose -f /home/vagrant/Proyecto-integrado/podman/podman-compose/wordpress/docker-compose.yml up #### Veremos que tenemos 3 contenedores #### vagrant@podman:~/.</description>
    </item>
    
    <item>
      <title>Compose Redmine</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/compose-redmine/</link>
      <pubDate>Tue, 01 Jun 2021 11:54:54 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/compose-redmine/</guid>
      <description>Para este escenario podemos seguir la documentación sobre la imagen que estamos usando, en este caso usamos la imagen de redmine y la imagen de mysql.
Podemos ver mas parametros y variables a configurar en la documentacion:
 Redmine: documentación de la imagen MySQL: Documentación de la imagen Fichero .yml  #### Ejecutamos el fichero docker-compose.yml con podman-compose #### vagrant@podman:~/.local/bin$ ./podman-compose -t pod1fw -p redmine -f /home/vagrant/Proyecto-integrado/podman/podman-compose/redmine/docker-compose.yml up #### Veremos que tenemos 3 contenedores #### vagrant@podman:~/.</description>
    </item>
    
    <item>
      <title>Compose Prestashop</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/compose-prestashop/</link>
      <pubDate>Tue, 01 Jun 2021 11:54:46 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/compose-prestashop/</guid>
      <description>Para este escenario podemos seguir la documentación sobre la imagen que estamos usando, en este caso usamos la imagen de prestashop y mariadb.
Podemos ver mas parametros y variables a configurar en la documentacion:
 Mariadb: documentación de la imagen Prestashop: documentacion de la imagen Fichero .yml  #### Ejecutamos el fichero docker-compose.yml con podman-compose #### vagrant@podman:~/.local/bin$ ./podman-compose -t 1podfw -p presta -f /home/vagrant/Proyecto-integrado/podman/podman-compose/prestashop/docker-compose.yml up #### Veremos que tenemos 3 contenedores #### vagrant@podman:~/.</description>
    </item>
    
    <item>
      <title>Compose Nextcloud</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/compose-nextcloud/</link>
      <pubDate>Tue, 01 Jun 2021 11:54:38 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/compose-nextcloud/</guid>
      <description>Para este escenario podemos seguir la documentación sobre la imagen que estamos usando, en este caso usamos la imagen de nextcloud y mariadb.
Podemos ver mas parametros y variables a configurar en la documentacion:
 Mariadb: documentación de la imagen Nextcloud: documentacion de la imagen Fichero .yml  #### Ejecutamos el fichero docker-compose.yml con podman-compose #### vagrant@podman:~/.local/bin$ ./podman-compose -t 1podfw -p nextcloud -f /home/vagrant/Proyecto-integrado/podman/podman-compose/nextcloud/docker-compose.yml up #### Veremos que tenemos 3 contenedores #### vagrant@podman:~/.</description>
    </item>
    
    <item>
      <title>Compose Grafana</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/compose-grafana/</link>
      <pubDate>Tue, 01 Jun 2021 11:54:30 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/compose-grafana/</guid>
      <description>Para este escenario podemos seguir la documentación sobre la imagen que estamos usando, en este caso usamos la imagen de grafana.
Podemos ver mas parametros y variables a configurar en la documentacion:
 Grafana: documentación de la imagen Fichero .yml  #### Ejecutamos el fichero docker-compose.yml con podman-compose #### vagrant@podman:~/.local/bin$ ./podman-compose -t 1podfw -p grafana -f /home/vagrant/Proyecto-integrado/podman/podman-compose/grafana/docker-compose.yml up #### Veremos que tenemos 3 contenedores #### vagrant@podman:~/.local/bin$ podman ps -a --pod CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES POD ID PODNAME b5d5f3ae0b3e k8s.</description>
    </item>
    
    <item>
      <title>Podman</title>
      <link>https://franjavimn.onrender.com/proyecto-podman/podman/</link>
      <pubDate>Tue, 01 Jun 2021 11:52:23 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/proyecto-podman/podman/</guid>
      <description>Contenedores podman En el siguiente post vamos a ver como podemos encontrar una alternativa a los contenedores Docker sin necesidad de tener que aprender nuevos comandos y sintaxis, para ello, la solución son los contenedores Podman
¿Qué son los contenedores Podman? Lo primero de lo que vamos a hablar es de donde surgio este motor de contenedores, sus caracteristicas mas representativas y las diferencias que podemos ver con su rival mas directo, Docker.</description>
    </item>
    
  </channel>
</rss>
