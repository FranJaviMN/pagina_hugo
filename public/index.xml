<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://franjavimn.onrender.com/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <copyright>Francisco Javier Martín Núñez</copyright>
    <lastBuildDate>Thu, 11 Feb 2021 14:17:18 +0100</lastBuildDate><atom:link href="https://franjavimn.onrender.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker Compose</title>
      <link>https://franjavimn.onrender.com/implantacion/docker-compose/</link>
      <pubDate>Thu, 11 Feb 2021 14:17:18 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/docker-compose/</guid>
      <description>Docker Compose La herramienta Docker Compose, que nos permitirá definir y ejecutar múltiples aplicaciones utilizando contenedores de software.
Con Compose utilizaremos ficheros en formato YAML, que nos servirán para definir la configuración de la aplicación en cuestión. De esta manera podemos, con un solo comando, crear e iniciar los servicios configurados en estos ficheros.
Vamos a definir el escenario en un fichero llamado docker-compose.yaml y vamos a gestionar el ciclo de vida de la aplicaciones y de todos los contenedores que necesitamos con la utilidad docker-compose.</description>
    </item>
    
    <item>
      <title>Correo Ovh</title>
      <link>https://franjavimn.onrender.com/servicios/correo-ovh/</link>
      <pubDate>Thu, 11 Feb 2021 12:32:11 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/correo-ovh/</guid>
      <description>Práctica: Servidor de correos Instala y configura de manera adecuada el servidor de correos en tu máquina de OVH, para tu dominio iesgnXX.es. El nombre del servidor de correo será mail.iesgnXX.es (Este es el nombre que deberá aparecer en el registro MX)
Para ello debemos de añadir un nuevo resgistro MX en nuestro dns de OVH por lo que debemos de dirigirnos a nuestro panel de control del DNS de nuestro OVH y tenemos que añadir una entrada como la siguiente:</description>
    </item>
    
    <item>
      <title>ISCSI</title>
      <link>https://franjavimn.onrender.com/hlc/iscsi/</link>
      <pubDate>Wed, 10 Feb 2021 19:19:56 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/hlc/iscsi/</guid>
      <description>iSCI ¿Que es iSCSI? iSCSI (Abreviatura de Internet SCSI) es un estándar que permite el uso del protocolo SCSI sobre redes TCP/IP. iSCSI es un protocolo de la capa de transporte definido en las especificaciones SCSI-3.
El protocolo iSCSI utiliza TCP/IP para sus transferencias de datos. Al contrario que otros protocolos de red diseñados para almacenamiento solamente requiere una simple y sencilla interfaz Ethernet para funcionar. Esto permite una solución de almacenamiento centralizada de bajo coste sin la necesidad de realizar inversiones costosas ni sufrir las habituales incompatibilidades asociadas a las soluciones de canal de fibra para Redes de área de almacenamiento.</description>
    </item>
    
    <item>
      <title>Tarea Vpn</title>
      <link>https://franjavimn.onrender.com/seguridad/tarea-vpn/</link>
      <pubDate>Wed, 10 Feb 2021 14:20:10 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/tarea-vpn/</guid>
      <description>VPN con OpenVPN En esta parte del tema vamos a trabajar con Redes Privadas Virtuales que es una red privada que usa una red pública(normalmente Internet) para conectar sucursales o usuarios.
Existen tres tipos de VPN distintas:
  Conexiones de clientes de acceso remoto: Dan solución a los trabajadores móviles que deben poder usar los recursos de lared interna desde localizaciones remotas
  Comunicación site-to-site: Dos o más redes locales son unidas a través de una VPN formando una intranet extendida.</description>
    </item>
    
    <item>
      <title>Varnish &#43; Nginx</title>
      <link>https://franjavimn.onrender.com/servicios/varnish&#43;nginx/</link>
      <pubDate>Tue, 09 Feb 2021 13:29:29 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/varnish&#43;nginx/</guid>
      <description>Varnish + Nginx En esta practica vamos a montar un escenario con nginx y varnish para ver como mejora el rendimiento de nuestro sitio web de forma significativa pero antes vamos a ecplicar que es Varnish.
¿Qué es Varnish? Varnish Cache es un acelerador de aplicaciones web, también conocido como caché de proxy HTTP inversa. Se instala delante de cualquier servidor HTTP y se configura para almacenar en el caché del servidor una copia del recurso solicitado.</description>
    </item>
    
    <item>
      <title>Redes Docker</title>
      <link>https://franjavimn.onrender.com/implantacion/redes-docker/</link>
      <pubDate>Tue, 09 Feb 2021 13:22:13 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/redes-docker/</guid>
      <description>Redes en Docker Aunque hasta ahora no lo hemos tenido en cuenta, cada vez que creamos un contenedor, esté se conecta a una red virtual y docker hace una configuración del sistema (usando interfaces puente e iptables) para que la máquina tenga una ip interna, tenga acceso al exterior, podamos mapear (DNAT) puertos,…)
debian@omega:~$ docker run -it --rm debian bash -c &amp;#34;ip a&amp;#34; 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.</description>
    </item>
    
    <item>
      <title>Almacenamiento Docker</title>
      <link>https://franjavimn.onrender.com/implantacion/almacenamiento-docker/</link>
      <pubDate>Tue, 09 Feb 2021 13:22:05 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/almacenamiento-docker/</guid>
      <description>Almacenamiento Los contenedores son efímeros, es decir, los ficheros, datos y configuraciones que creamos en los contenedores sobreviven a las paradas de los mismos pero, sin embargo, son destruidos si el contenedor es destruido.
Por lo que todo contenido que tengamos dentro del contenedor puede ser destruido y todo lo que haya en su interior, podemos verlo facilmente con el siguiente ejemplo de un servidor web:
#### Creamos el contenedor con la imagen de apache2 #### debian@omega:~$ docker run -d --name my-apache-app -p 8080:80 httpd:2.</description>
    </item>
    
    <item>
      <title>Interconexion</title>
      <link>https://franjavimn.onrender.com/bbdd/interconexion/</link>
      <pubDate>Mon, 08 Feb 2021 18:19:40 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/interconexion/</guid>
      <description>Interconexión de Servidores de Bases de Datos Las interconexiones de servidores de bases de datos son operaciones que pueden ser muy útiles en diferentes contextos. Básicamente, se trata de acceder a datos que no están almacenados en nuestra base de datos, pudiendo combinarlos con los que ya tenemos.
En esta práctica veremos varias formas de crear un enlace entre distintos servidores de bases de datos. Se pide los tres siguientes puntos:</description>
    </item>
    
    <item>
      <title>Cortafuegos</title>
      <link>https://franjavimn.onrender.com/seguridad/cortafuegos/</link>
      <pubDate>Wed, 03 Feb 2021 19:30:58 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/cortafuegos/</guid>
      <description>Cortafuegos Vamos a construir un cortafuegos en dulcinea que nos permita controlar el tráfico de nuestra red. El cortafuegos que vamos a construir debe funcionar tras un reinicio.
Política por defecto La política por defecto que vamos a configurar en nuestro cortafuegos será de tipo DROP.
Antes de activar dicha politica debemos de comprobar que nuestras reglas funcionan, si no nos quedaremos sin que funcionen algunos servicios o el ssh.</description>
    </item>
    
    <item>
      <title>Monitorizacion</title>
      <link>https://franjavimn.onrender.com/sistemas/monitorizacion/</link>
      <pubDate>Mon, 01 Feb 2021 19:22:06 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/monitorizacion/</guid>
      <description>Monitorización La monitorización de los sistemas que podamos tener en producción es una parte muy importante a la hora de hacer que todos los servicios que ofrecemos con nuestros sitemas funcionen correctamente y, si en el caso de que hubiera un fallo o algun error, gracias a la monitorización de nuestros sitemas, lograr encontrar y solucionar el error.
Hoy dia podemos encontrar una gran cantidad de sistemas de monitorización, ya sean mediante la recolención de metricas, la monitorizacion de los sistemas o usar una gestion de logs centralizada de todos los equipos.</description>
    </item>
    
    <item>
      <title>Introduccion Docker</title>
      <link>https://franjavimn.onrender.com/implantacion/introduccion-docker/</link>
      <pubDate>Mon, 01 Feb 2021 13:22:55 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/introduccion-docker/</guid>
      <description>Intrducción a Docker Docker es una tecnología de virtualización “ligera” cuyo elemento básico es la utilización de contenedores en vez de máquinas virtuales y cuyo objetivo principal es el despliegue de aplicaciones encapsuladas en dichos contenedores.
Docker está formado por varios componentes:
  Docker Engine: Es un demonio que corre sobre cualquier distribución de Linux y que expone una API externa para la gestión de imágenes y contenedores. Con ella podemos crear imágnenes, subirlas y bajarla de un registro de docker y ejecutar y gestionar contenedores.</description>
    </item>
    
    <item>
      <title>Cms Python</title>
      <link>https://franjavimn.onrender.com/implantacion/cms-python/</link>
      <pubDate>Fri, 22 Jan 2021 20:22:10 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/cms-python/</guid>
      <description>Instalación de aplicación web python En esta tarea vamos a desplegar un CMS python. Para ello he elegido de la pagina https://djangopackages.org/grids/g/cms/ el cms llamado Mezzanine y lo vamos a desplegar en el entorno de produccion con uwsgi.
Creacion en el entorno de desarrollo Lo primero que debemos de hacer es desplegar nuestra aplicacion en nuestro entorno de desarrollo para asi, mediante un repositorio en github, podamos llevarnos todo el despliegue a nuestra maquina en desarrollo, en este caso va a ser la maquina Quijote.</description>
    </item>
    
    <item>
      <title>Integracion Continua</title>
      <link>https://franjavimn.onrender.com/implantacion/integracion-continua/</link>
      <pubDate>Thu, 21 Jan 2021 17:34:08 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/integracion-continua/</guid>
      <description>Práctica: Introducción a la integración continua Debes realizar una de las siguientes tareas, utilizando una herramienta de CI/CD: GitHub Actions, GiLab CI/CD, CircleCI, Jenkins, … (No uses Travis CI).
En mi caso vamos a usar CodeShip, codeship es una plataforma alojada de integración y entrega continua. Se encuentra entre tu repositorio de código fuente (por ejemplo, GitHub, GitLab o Bitbucket) y el entorno de alojamiento (por ejemplo, Amazon Web Services) y prueba e implementa automáticamente cada cambio en tu plataforma.</description>
    </item>
    
    <item>
      <title>Demo Ansible Wordpress</title>
      <link>https://franjavimn.onrender.com/cloud/demo-ansible-wordpress/</link>
      <pubDate>Wed, 20 Jan 2021 20:18:39 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/cloud/demo-ansible-wordpress/</guid>
      <description>Ansible Ansible es un software que automatiza el aprovisionamiento de software, la gestión de configuraciones y el despliegue de aplicaciones. Está categorizado como una herramienta de orquestación, muy útil para los administradores de sistema y DevOps.
En otras palabras, Ansible permite a los DevOps gestionar sus servidores, configuraciones y aplicaciones de forma sencilla, robusta y paralela.
Ansible gestiona sus diferentes nodos a través de SSH y únicamente requiere Python en el servidor remoto en el que se vaya a ejecutar para poder utilizarlo.</description>
    </item>
    
    <item>
      <title>Fs Avanzados</title>
      <link>https://franjavimn.onrender.com/hlc/fs-avanzados/</link>
      <pubDate>Wed, 13 Jan 2021 09:50:19 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/hlc/fs-avanzados/</guid>
      <description>Sistemas de ficheros avanzados En este ejercicio vamos a realizar pruebas con los sistemas de ficheros &amp;ldquo;avanzados&amp;rdquo; como pueden ser Btrfs o ZFS, para ello debemos de elegir uno de ellos pero primero vamos a ver un poco de la historia de ambos sistemas de ficheros y, posteriormente, veremos ejemplos de uso de estos sistemas de ficheros y de sus avanzadas caracteristicas.
Btrfs Btrfs es un sistema de ficheros copy-on-write (CoW) para Linux enfocado a implementar características novedosas y avanzadas y, a la vez, centrado en la tolerancia a fallos, reparación y facilidad de administración.</description>
    </item>
    
    <item>
      <title>Https Quijote</title>
      <link>https://franjavimn.onrender.com/seguridad/https-quijote/</link>
      <pubDate>Mon, 11 Jan 2021 18:00:52 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/https-quijote/</guid>
      <description>Solicitar certificado wildcard con openssl Para esta practica vamos a solicitar un certificado wildcard para nuestra dominio llamado *franjavier.gonzalonazareno.org en el que vamos a tener nuestro escenario de openstack.
Creacion de clave privada y certificado Para poder realizar esta practica vamos a irnos a nuestra maquina llamada freston que es donde vamos a usar nuestro certificado wildcard principalmente, en esta maquina vamos a crear una clave privada y luego generamos el certificado indicandole el directorio donde esta la clave:</description>
    </item>
    
    <item>
      <title>Trabajo Openstack</title>
      <link>https://franjavimn.onrender.com/servicios/trabajo-openstack/</link>
      <pubDate>Wed, 30 Dec 2020 16:33:01 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/trabajo-openstack/</guid>
      <description>Servidores Web, Base de Datos y DNS En esta practica vamos a tener un servidor dns con bidn9 en la maquina de la red interna llamada Frestón, en ella vamos a tener nuestro servidor dns activo en el cual vamos a tener que activar 3 vistas para las distintas consultas que le vamos a realizar, estas vistas seran las siguiente:
 Vista para la red externa (172.22.0.0/15 y 192.168.202.2) Vista para la red interna (10.</description>
    </item>
    
    <item>
      <title>Instalar Guacamole</title>
      <link>https://franjavimn.onrender.com/implantacion/instalar-guacamole/</link>
      <pubDate>Wed, 30 Dec 2020 16:13:32 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/instalar-guacamole/</guid>
      <description>Instalcion de Guacamole En mi caso, en la practica sobre el despliegue de una aplicacion hecha en java con Tomcar vamos a elegir el cms llamado Guacamole.
¿Qué es Guacamole apache? Guacamole es un proyecto de escritorio remoto desarrollado por la Apache Software Foundation. Es un sistema compuesto por una parte cliente y una parte servidor. La aplicación servidor es la que se encarga de la autenticación y precisa de la instalación en infraestructura propia o acogerse la un servicio de terceros y estar accesible desde la parte cliente.</description>
    </item>
    
    <item>
      <title>Usuarios ACL Grupos</title>
      <link>https://franjavimn.onrender.com/sistemas/usuarios-acl-grupos/</link>
      <pubDate>Mon, 21 Dec 2020 13:21:30 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/usuarios-acl-grupos/</guid>
      <description>Usuarios, grupos y ACLs en LDAP En este documento vamos a proceder a la creacion de un escenario de ldap en el que vamos a tener los siguientes puntos a completar:
  Crea 10 usuarios con los nombres que prefieras en LDAP, esos usuarios deben ser objetos de los tipos posixAccount e inetOrgPerson. Estos usuarios tendrán un atributo userPassword.
  Crea 3 grupos en LDAP dentro de una unidad organizativa diferente que sean objetos del tipo groupOfNames.</description>
    </item>
    
    <item>
      <title>Ldaps</title>
      <link>https://franjavimn.onrender.com/sistemas/ldaps/</link>
      <pubDate>Mon, 21 Dec 2020 13:18:45 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/ldaps/</guid>
      <description>LDAPS Para poder realizar este ejercicio necesitamos un certificado wildcard en nuestra maquina donde tenemos el servidor de ldap. Para ello debemos de solicitar el certificado a nuestra autoridad certificador bajo el dominio que nosotros necesitemos, en mi caso será .franjavier.gonzalonazareno.org
Una vez lo tengamos creado ya podremos seguir con el ejercicio sobre ldaps. Lo primero que debemos de hacer es crear unas acl para que nuestro usuario de openldap pueda acceder a los certificados y claves, para ello vamos a usar el paquete llamado acl y luego vamos a crear un total de 4 acl:</description>
    </item>
    
    <item>
      <title>Ldap Instalacion</title>
      <link>https://franjavimn.onrender.com/sistemas/ldap-instalacion/</link>
      <pubDate>Mon, 14 Dec 2020 11:52:37 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/ldap-instalacion/</guid>
      <description>Instalacion de ldap en la maquina freston Para ello tenemos en nuestro escenario una maquina llamada freston con una ip privada 10.0.1.11 accesible desde dulcinea, en esta maquina vamos a instalar un servidor ldap y en el vamos a crear dos unidades organizativas, una para personas y otra para los grupos.
Importante recalcar que nuestra maquina freston tiene como hostname freston y como fqdn freston.franjavier.gonzalonazareno.org lo cual es muy importante a la hora de la resolucion dns.</description>
    </item>
    
    <item>
      <title>Prueba Django</title>
      <link>https://franjavimn.onrender.com/implantacion/prueba-django/</link>
      <pubDate>Thu, 10 Dec 2020 14:08:25 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/prueba-django/</guid>
      <description>Despliegue de aplicaciones python Tarea 1 Entorno de desarrollo Vamos a desarrollar la aplicación del tutorial de django 3.1. Vamos a configurar tu equipo como entorno de desarrollo para trabajar con la aplicación, para ello:
 Vamos a desarrollar la aplicación del tutorial de django 3.1. Vamos a configurar tu equipo como entorno de desarrollo para trabajar con la aplicación, para ello: https://github.com/josedom24/django_tutorial.  Por lo que nos vamos a ese repositorio y lo que vamos a hacer es crear un fork a nuestro repositorio para posteriormente clonarlo en nuestra maquina:</description>
    </item>
    
    <item>
      <title>Mongodb</title>
      <link>https://franjavimn.onrender.com/bbdd/mongodb/</link>
      <pubDate>Wed, 09 Dec 2020 13:46:40 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/mongodb/</guid>
      <description>Instalar mongodb en una maquina debian 10 En mi caso vamos a instalar debian 10 en una maquina virtual con vagrant, el codigo de vagrant que he usado es el siguiente:
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.define :mongodb do |mongodb| mongodb.vm.box = &amp;#34;debian/buster64&amp;#34; mongodb.vm.hostname = &amp;#34;mongodb&amp;#34; mongodb.vm.network :public_network, :bridge=&amp;gt;&amp;#34;wlp2s0&amp;#34; end end Cuando tengamos la maquina lista lo que vamos a hacer es instalar unas herramientas antes de empezar:
#### Actualizamos las listas de repositorios #### vagrant@mongodb:~$ sudo apt update #### Instalamos las herramientas necesarias #### vagrant@mongodb:~$ sudo apt install gnupg -y Descargar mongodb para debian 10 AHora que ya tenemos las herramientas anteriores lo que debemos de hacer es añadir un nuevo repositorio a nuestra maquina ya que los paquetes de mongodb no se encuentran en los repositorios de debian, por lo que ejecutamos los siguientes comandos:</description>
    </item>
    
    <item>
      <title>Postgres Debian</title>
      <link>https://franjavimn.onrender.com/bbdd/postgres-debian/</link>
      <pubDate>Wed, 09 Dec 2020 13:45:06 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/bbdd/postgres-debian/</guid>
      <description>Instalacion de un servidor Postgres Lo primero que debemos de tener es una maquina virtual en la cual vamos a realizar esta instalacion, en mi caso voy a usar una maquina con un sistema debian 10, creada mediante vagrant:
# Fichero vagrant Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.define :postgres do |postgres| postgres.vm.box = &amp;#34;debian/buster64&amp;#34; postgres.vm.hostname = &amp;#34;postgres&amp;#34; postgres.vm.network :public_network, :bridge=&amp;gt;&amp;#34;wlp2s0&amp;#34; end end Para poder instalar el servidor de postgreSQL vamos a instalar el paquete llamado postgresql el cual, al instalarlo y ver su version vemos que actualmente tenemos la version 11.</description>
    </item>
    
    <item>
      <title>Practica Dns</title>
      <link>https://franjavimn.onrender.com/servicios/practica-dns/</link>
      <pubDate>Thu, 03 Dec 2020 13:47:57 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/practica-dns/</guid>
      <description>Práctica: Servidor DNS Escenario   En nuestra red local tenemos un servidor Web que sirve dos páginas web: www.iesgn.org, departamentos.iesgn.org
  Vamos a instalar en nuestra red local un servidor DNS (lo puedes instalar en el mismo equipo que tiene el servidor web)
  Voy a suponer en este documento que el nombre del servidor DNS va a ser pandora.iesgn.org. El nombre del servidor de tu prácticas será tunombre.</description>
    </item>
    
    <item>
      <title>Https Ovh</title>
      <link>https://franjavimn.onrender.com/seguridad/https-ovh/</link>
      <pubDate>Fri, 27 Nov 2020 11:04:59 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/https-ovh/</guid>
      <description>HTTPS en ovh   Vamos a utilizar el servicio https://letsencrypt.org para solicitar los certificados de nuestras páginas.
  Explica detenidamente cómo se solicita un certificado en Let&amp;rsquo;s Encrypt. En tu explicación deberás responder a estas preguntas:
 ¿Qué función tiene el cliente ACME? ¿Qué configuración se realiza en el servidor web? ¿Qué pruebas realiza Let&amp;rsquo;s Encrypt para asegurar que somos los administrados del sitio web? ¿Se puede usar el DNS para verificar que somos administradores del sitio?</description>
    </item>
    
    <item>
      <title>Certificados Digitales</title>
      <link>https://franjavimn.onrender.com/seguridad/certificados-digitales/</link>
      <pubDate>Mon, 23 Nov 2020 14:15:09 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/certificados-digitales/</guid>
      <description>Práctica: Certificados digitales. HTTPS Tarea 1  Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito.  Para instalarlo en el navegador, en mi caso lo voy a instalar en firefox, solo debemos de descargarnos el certificado desde la pagina siguiente.
Una vez lo tengamos nos vamos a la zona de preferencias -&amp;gt; Privacidad y seguridad y ahi buscamos el apartado de certificados, le damos a ver certificados y agregamos el nuestro que nos hemos descargado previamente.</description>
    </item>
    
    <item>
      <title>Actualizar Centos8</title>
      <link>https://franjavimn.onrender.com/sistemas/actualizar-centos8/</link>
      <pubDate>Thu, 19 Nov 2020 13:23:35 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/actualizar-centos8/</guid>
      <description>De centos7 a centos8 En este documento vamos a detallar como vamos a hacer una actualizacion desde centos7 a centos8. Para ello lo recomendable es hacer una copia de nuestra maquina que vamos a actualizar y guardar esa copia para que, en caso de que cometamos algun error y la maquina deje de funcionar, poder restaurarla para volver a intentar. En mi caso, antes de empezar a trabajar con la maquina que queremos tener actualizada, he realizado primero la actualizacion en una maquina de prueba con las mismas caracteristicas y paquetes que la maquina que queremos actualizar.</description>
    </item>
    
    <item>
      <title>Instalacion Nginx Ovh</title>
      <link>https://franjavimn.onrender.com/implantacion/instalacion-nginx-ovh/</link>
      <pubDate>Wed, 18 Nov 2020 18:21:55 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/instalacion-nginx-ovh/</guid>
      <description>Realizar la migración de la aplicación drupal que tienes instalada en el entorno de desarrollo a nuestro entorno de producción, para ello ten en cuenta lo siguiente: Tarea 1 La aplicación se tendrá que migrar a un nuevo virtualhost al que se accederá con el nombre portal.iesgn13.es.
De esta forma ya tenemos listo nuestro documentroot para nuestro nuevo virtualhost, ahora el siguiente paso es crear dicho virtualhost, para ello seguimos los pasos siguientes:</description>
    </item>
    
    <item>
      <title>Nginx Ovh</title>
      <link>https://franjavimn.onrender.com/servicios/nginx-ovh/</link>
      <pubDate>Mon, 09 Nov 2020 11:11:39 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/nginx-ovh/</guid>
      <description>Instalación de un servidor LEMP Esta practica se va a realizar en el servidor de OVH que nos han proporcionado, en mi caso, el servidor es omega.iesgn13.es. A esta maquina se va a acceder con las claves privadas que tenemos en dicha maquina.
francisco@debian10:~/.ssh$ ssh -i id_rsa debian@omega.iesgn13.es Enter passphrase for key &amp;#39;id_rsa&amp;#39;: Linux omega 4.19.0-11-cloud-amd64 #1 SMP Debian 4.19.146-1 (2020-09-17) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright.</description>
    </item>
    
    <item>
      <title>Practica Servidor Nginx</title>
      <link>https://franjavimn.onrender.com/servicios/practica-servidor-nginx/</link>
      <pubDate>Wed, 04 Nov 2020 17:42:53 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/practica-servidor-nginx/</guid>
      <description>Práctica: Servidor Web Nginx Nginx es un famoso software de servidor web de código abierto. En su versión inicial, funcionaba en servidores web HTTP. Sin embargo, hoy en día también sirve como proxy inverso, balanceador de carga HTTP y proxy de correo electrónico para IMAP, POP3 y SMTP.
Debido a su excelente capacidad para manejar muchas conexiones y a su velocidad, muchos sitios web de alto tráfico usan el servicio de NGINX.</description>
    </item>
    
    <item>
      <title>Ej5 Apache2</title>
      <link>https://franjavimn.onrender.com/servicios/ej5-apache2/</link>
      <pubDate>Mon, 02 Nov 2020 17:15:12 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/ej5-apache2/</guid>
      <description>Ejercicio 5: Control de acceso, autentificación y autorización El Control de acceso en un servidor web nos permite determinar desde donde podemos acceder a los recursos del servidor. En los servidores apache podemos tener dos tipos de Autentificación:
Autentificación básica Es un método simple que utiliza codificación Base64 y por lo tanto es menos seguro. Podemos hacer aún más seguro el acceso a nuestras páginas sensibles haciendo uso conjunto de HTTPS y autenticación Basic, es decir, que en primer lugar nuestro servidor web utilice SSL o TLS en las conexiones y sobre la conexión encriptada, usar Basic como método de autenticación.</description>
    </item>
    
    <item>
      <title>Ej6 Apache2</title>
      <link>https://franjavimn.onrender.com/servicios/ej6-apache2/</link>
      <pubDate>Mon, 02 Nov 2020 17:15:07 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/ej6-apache2/</guid>
      <description>Configuración de apache mediante archivo .htaccess Un fichero .htaccess (hypertext access), también conocido como archivo de configuración distribuida, es un fichero especial, popularizado por el Servidor HTTP Apache que nos permite definir diferentes directivas de configuración para cada directorio (con sus respectivos subdirectorios) sin necesidad de editar el archivo de configuración principal de Apache.
Para permitir el uso de los ficheros .htaccess o restringir las directivas que se pueden aplicar usamos ela directiva AllowOverride, que puede ir acompañada de una o varias opciones: All, AuthConfig, FileInfo, Indexes, Limit, …</description>
    </item>
    
    <item>
      <title>Practica Cms</title>
      <link>https://franjavimn.onrender.com/implantacion/practica-cms/</link>
      <pubDate>Fri, 30 Oct 2020 18:03:23 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/practica-cms/</guid>
      <description>Instalación local de un CMS PHP Esta tarea consiste en instalar un CMS de tecnología PHP en un servidor local. Los pasos que tendrás que dar los siguientes:
Tarea 1: Instalación de un servidor LAMP   Crear una instancia de vagrant basado en un box debian o ubuntu
  Instala en esa máquina virtual toda la pila LAMP
  Tarea 2: Instalación de drupal en mi servidor local   Configura el servidor web con virtual hosting para que el CMS sea accesible desde la dirección: www.</description>
    </item>
    
    <item>
      <title>Vpn Openstack</title>
      <link>https://franjavimn.onrender.com/sistemas/vpn-openstack/</link>
      <pubDate>Fri, 30 Oct 2020 13:21:46 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/vpn-openstack/</guid>
      <description>Configuración de cliente OpenVPN con certificados X.509 En este caso vamos a configurar una VPN con el cliente OpenVPN para poder conectarnos a la maquina virtual sputnik.gonzalonazareno.org, los pasos a seguir son los siguientes:
 Disponer de un certificado x509 para nuestro equipo firmado por la CA Gonzalo Nazareno Configurar OpenVPN para que se conecte a sputnik.  Creacion de clave privada y solicitud de firma. Lo primero que vamos a crear va a ser una clave privada con la herramienta openssl, en este caso una clave privada RSA de 4096 bits.</description>
    </item>
    
    <item>
      <title>Practica Integridad</title>
      <link>https://franjavimn.onrender.com/seguridad/practica-integridad/</link>
      <pubDate>Tue, 27 Oct 2020 18:30:09 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/practica-integridad/</guid>
      <description>Práctica: Integridad, firmas y autenticación Tarea 1: Firmas electrónicas En este apartado vamos a con las firmas electrónicas. Para ello vamos a necesitar subir nuestra clave publica a un servidor de claves, en este caso lo he subido al servidor keys.gnupg.net con el siguiente comando:
gpg --send-keys --keyserver pgp.rediris.es D6BE9BF1C7D6A435BF1B9D38BEAECEA4DC2F7A96  ¿Qué significa el mensaje que aparece en el momento de verificar la firma?  EL mensaje que nos muestra en nuestra terminal siginufica que, si bien tenemos la clave publica para poder verificar la firma, esta no la tenemos firmada por nadie de confianza y nosotros tampoco le hemos dado una confianza a esa clave.</description>
    </item>
    
    <item>
      <title>Compilacion Programa</title>
      <link>https://franjavimn.onrender.com/sistemas/compilacion-programa/</link>
      <pubDate>Sun, 25 Oct 2020 12:23:58 +0100</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/compilacion-programa/</guid>
      <description>Compilación de un programa en C utilizando un Makefile En la siguiente tarea vamos a realizar la compilacion de un programa en c usando la herramienta make, para ello vamos a usar dos programas para hacer la compilacion: htop y nano
Compilando el programa nano Primero vamos a proceder a la compilacion del programa nano, nano es un editor de texto fácil de usar. Nano trata de emular la funcionalidad y la interfaz de fácil manejo de Pico, pero sin la integración con Pine.</description>
    </item>
    
    <item>
      <title>Ej4 Apache</title>
      <link>https://franjavimn.onrender.com/servicios/ej4-apache/</link>
      <pubDate>Wed, 21 Oct 2020 18:10:55 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/ej4-apache/</guid>
      <description>Ejercicio 4 : Mapear URL a ubicaciones de un sistema de ficheros Crea un nuevo host virtual que es accedido con el nombre www.mapeo.com, cuyo DocumentRoot sea /srv/mapeo
  Cuando se entre a la dirección www.mapeo.com se redireccionará automáticamente a www.mapeo.com/principal, donde se mostrará el mensaje de bienvenida.
  En el directorio principal no se permite ver la lista de los ficheros, no se permite que se siga los enlaces simbólicos y no se permite negociación de contenido.</description>
    </item>
    
    <item>
      <title>Script Paquetes</title>
      <link>https://franjavimn.onrender.com/sistemas/script-paquetes/</link>
      <pubDate>Sun, 18 Oct 2020 14:44:56 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/script-paquetes/</guid>
      <description>Script para seleccionar paquetes por repositorio Tenemos que realizar un script que introduciéndolo como parámetro el nombre de un repositorio, muestre como salida los paquetes de ese repositorio que están instalados en la máquina. Los repositorios pueden ser introducidos de dos formas distintas:
 ./script.sh security.debian.org  o bien
 ./script.sh http://security.debian.org  Script para la selección de paquetes He realizado el siguiente script el cual tambien podemos encontrar em el siguiente enlace:</description>
    </item>
    
    <item>
      <title>Ej3 Apache</title>
      <link>https://franjavimn.onrender.com/servicios/ej3-apache/</link>
      <pubDate>Fri, 16 Oct 2020 09:11:56 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/ej3-apache/</guid>
      <description>Ejercicio 3: VirtualHosting con Apache Introducción al VirtualHosting El término Hosting Virtual se refiere a hacer funcionar más de un sitio web (tales como www.company1.com y www.company2.com) en una sola máquina. Los sitios web virtuales pueden estar “basados en direcciones IP”, lo que significa que cada sitio web tiene una dirección IP diferente, o “basados en nombres diferentes”, lo que significa que con una sola dirección IP están funcionando sitios web con diferentes nombres (de dominio).</description>
    </item>
    
    <item>
      <title>Guia Hugo</title>
      <link>https://franjavimn.onrender.com/implantacion/guia-hugo/</link>
      <pubDate>Wed, 14 Oct 2020 17:15:19 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/implantacion/guia-hugo/</guid>
      <description>GoHugo ¿Que es GoHugo? Hugo es un generador de sitio estático escrito en Go. Hugo ha visto un gran aumento en las características y el rendimiento gracias al desarrollador principal actual Bjørn Erik Pedersen y otros colaboradores. Hugo es de codigo abierto bajo la licencia de Apache License 2.0.
Al ser capaz de generar la mayoría de los sitios web en segundos (a &amp;lt;1 ms por página), Hugo es reconocido como &amp;ldquo;el framework más rápido del mundo para la creación de sitios web&amp;rdquo; gracias no solo a que se ha creado con Go, sino también a los esfuerzos concienzudos de sus desarrolladores para comparar y aumentar actuación.</description>
    </item>
    
    <item>
      <title>Practica Dhcp</title>
      <link>https://franjavimn.onrender.com/servicios/practica-dhcp/</link>
      <pubDate>Sat, 10 Oct 2020 12:40:00 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/practica-dhcp/</guid>
      <description>Practica DHCP Teoria  Tarea 1 (1 punto): Lee el documento Teoría: Servidor DHCP y explica el funcionamiento del servidor DHCP resumido en este gráfico.  Preparación del escenario Crea un escenario usando Vagrant que defina las siguientes máquinas:
  Servidor: Tiene dos tarjetas de red: una pública y una privada que se conectan a la red local.
  nodolan1: Un cliente conectado a la red local.
  Instala un servidor dhcp en el ordenador “servidor” que de servicio a los ordenadores de red local, teniendo en cuenta que el tiempo de concesión sea 12 horas y que la red local tiene el direccionamiento 192.</description>
    </item>
    
    <item>
      <title>Router Nat</title>
      <link>https://franjavimn.onrender.com/servicios/router-nat/</link>
      <pubDate>Wed, 07 Oct 2020 19:37:24 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/router-nat/</guid>
      <description>Crear router-NAT con vagrant Queremos automatizar la creación de la siguiente infraestructura usando Vagrant, el esquema que queremos desarrollar, que vemos en la imagen, tiene las siguientes características:
  El escenario debe tener 2 maquinas:
  router, que está conectada a una red pública y a una red privada. La interfaz de red en la red privada se configura con la IP 10.0.0.1.
  cliente: Esta máquina está conectada a la misma red privada que la máquina anterior, en este caso su direccionamiento es 10.</description>
    </item>
    
    <item>
      <title>Practica Cifrado</title>
      <link>https://franjavimn.onrender.com/seguridad/practica-cifrado/</link>
      <pubDate>Wed, 07 Oct 2020 18:57:04 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/practica-cifrado/</guid>
      <description>Cifrado asimétrico con gpg y openssl En esta practica sobre el cifrado asimétrico con gpg y openssl vamos a realizar las siguientes tareas:
  Tarea 1: Generación de claves
 Genera un par de claves (pública y privada). ¿En que directorio se guarda las claves de un usuario? Lista las claves públicas que tienes en tu almacén de claves. Explica los distintos datos que nos muestra. ¿Cómo deberías haber generado las claves para indicar, por ejemplo, que tenga un 1 mes de validez?</description>
    </item>
    
    <item>
      <title>Dhcp Ejercicio</title>
      <link>https://franjavimn.onrender.com/servicios/dhcp-ejercicio/</link>
      <pubDate>Tue, 06 Oct 2020 19:05:29 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/servicios/dhcp-ejercicio/</guid>
      <description>Ejercicio: Instalación y configuración del servidor dhcp en linux En las siguientes tareas vamos ver como podemos instalar y configurar un servidor dhcp en una maquina vagrant para que este proporcione direcciones dinamicas a otras maquinas clientes.
Instalción del servidor isc-dhcp-server Para poder hacer una instalacion del servidor isc-dhcp-server en nuestro servidor, para ello nos vamos a la linea de comandos y escribimos:
vagrant@servidor:~$ sudo apt install isc-dhcp-server Con ese comando vamos a hacer la instalacion de nuestro servidor.</description>
    </item>
    
    <item>
      <title>Raid5</title>
      <link>https://franjavimn.onrender.com/seguridad/raid5/</link>
      <pubDate>Mon, 05 Oct 2020 20:01:02 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/raid5/</guid>
      <description>Raid 5 ¿Qué es RAID 5? Un RAID 5 (también llamado distribuido con paridad) es una división de datos a nivel de bloques que distribuye la información de paridad entre todos los discos miembros del conjunto. El RAID 5 ha logrado popularidad gracias a su bajo coste de redundancia. Generalmente, el RAID 5 se implementa con soporte hardware para el cálculo de la paridad. RAID 5 necesitará un mínimo de 3 discos para ser implementado.</description>
    </item>
    
    <item>
      <title>Rclone</title>
      <link>https://franjavimn.onrender.com/seguridad/rclone/</link>
      <pubDate>Mon, 05 Oct 2020 19:55:23 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/seguridad/rclone/</guid>
      <description>rclone en linux ¿Qué es rclone? se trata de una herramienta en línea de comando para sincronizar archivos y directorios desde la computadora con los proveedores más importantes de alojamiento de contenidos en la nube. También permite efectuar copias dentro de nuestro propio sistema de archivos.
Practica con rclone A continuación vamos a realizar distintas practicas con la herramienta de rclone en nuestro ordenador, para ello vamos a tener en total 4 tareas distintas.</description>
    </item>
    
    <item>
      <title>Dpkg Apt</title>
      <link>https://franjavimn.onrender.com/sistemas/dpkg-apt/</link>
      <pubDate>Mon, 05 Oct 2020 18:13:34 +0200</pubDate>
      
      <guid>https://franjavimn.onrender.com/sistemas/dpkg-apt/</guid>
      <description>Ejercicios de dpkg y APT En primer lugar prepara una máquina virtual con Debian buster, puedes hacerlo de la forma que prefieras o usando el fichero Vagrantfile que se proporciona.
La versión de debian buster a fecha de hoy, es la versión 10.6. Sobre una máquina de versión anterior realizar las siguientes acciones:
Trabajo con apt, aptitude, dpkg  ¿Qué acciones consigo al realizar apt update y apt upgrade? Explica detalladamente.</description>
    </item>
    
  </channel>
</rss>
